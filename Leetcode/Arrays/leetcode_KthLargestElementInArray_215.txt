class Solution {
    public int findKthLargest(int[] nums, int k) {
        // Quick Select
        int n = nums.length;
        // Kth Largest - (n-k)th Smallest
        return quickSelect(nums, 0, n-1, n-k);
    }

    private int quickSelect(int[] nums, int left, int right, int k) {
        if(left == right)
            return nums[left];

        int pivotIndex = partition(nums, left, right);

        if(pivotIndex == k) {
            return nums[pivotIndex];
        } else if(pivotIndex < k) {
            return quickSelect(nums, pivotIndex + 1, right, k);
        } else {
            return quickSelect(nums, left, pivotIndex - 1, k);
        }
    }

    private int partition(int[] nums, int left, int right) {
        int pivotIndex = left + new Random().nextInt(right - left + 1);
        swap(nums, pivotIndex, right);

        int pivotVal = nums[right];
        int index = left;

        for(int j=left; j<right; j++) {
            if(nums[j] < pivotVal) {
                swap(nums, index, j);
                index++;
            }
        }
        swap(nums, index, right);

        return index;
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}