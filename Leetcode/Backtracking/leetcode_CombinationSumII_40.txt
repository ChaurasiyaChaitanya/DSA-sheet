class Solution {
    List<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        // Sort before backtracking to detect and skip duplicates
        Arrays.sort(candidates);

        backtrack(candidates, target, 0, new ArrayList<>());

        return result;
    }

    private void backtrack(int[] candidates, int target, int start, List<Integer> temp) {
        if(target == 0) {
            result.add(new ArrayList<>(temp));
            return;
        }

        if(target < 0) {
            return;
        }

        for(int i=start; i<candidates.length; i++) {
            // Skip duplicates at the same recursion level
            if (i > start && candidates[i] == candidates[i - 1]) 
                continue;
                
            temp.add(candidates[i]);
            backtrack(candidates, target - candidates[i], i+1, temp);
            temp.remove(temp.size() - 1);
        }
    }
}