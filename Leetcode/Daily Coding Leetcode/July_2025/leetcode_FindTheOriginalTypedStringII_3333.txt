class Solution {
    private static final int MOD = 1000000007;

    public int possibleStringCount(String word, int k) {
        int n = word.length();
        int currCount = 1;

        List<Integer> group = new ArrayList<>();
        for(int i=1; i<n; i++) {
            if(word.charAt(i) == word.charAt(i-1)) {
                currCount++;
            } else {
                group.add(currCount);
                currCount = 1;
            }
        }

        group.add(currCount);

        long totalWays = 1;
        for(int count : group) {
            totalWays = (totalWays * count) % MOD;
        }

        if(group.size() >= k)
            return (int) totalWays;

        int[] dp = new int[k];
        int[] prefixSum = new int[k];

        dp[0] = 1;
        Arrays.fill(prefixSum, 1);

        for(int i=0; i<group.size(); i++) {
            int size = group.get(i);
            int[] newDp = new int[k];

            for(int j=1; j<k; j++) {
                newDp[j] = prefixSum[j-1];

                if(j-size-1 >= 0) {
                    newDp[j] = (newDp[j] - prefixSum[j-size-1] + MOD) % MOD;
                }
            }

            int[] newPrefix = new int[k];
            newPrefix[0] = newDp[0];

            for(int j=1; j<k; j++) {
                newPrefix[j] = (newPrefix[j-1] + newDp[j]) % MOD;
            }

            dp = newDp;
            prefixSum = newPrefix;
        }

        return (int) ((totalWays - prefixSum[k-1] + MOD) % MOD);

    }
}