class Solution {
    private int[][] dp;
    private int[] nextEvent;
    private int n;

    public int maxValue(int[][] events, int k) {
        n = events.length;
        dp = new int[n][k+1];

        for(int[] row : dp) {
            Arrays.fill(row, -1);
        }

        Arrays.sort(events, (a, b) -> a[0] - b[0]);

        nextEvent = new int[n];

        for(int i=0; i<n; i++) {
            int left = i+1;
            int right = n;
            while(left < right) {
                int mid = (left + right) / 2;
                if(events[mid][0] > events[i][1]) {
                    right = mid;
                } else {
                    left = mid + 1;
                }
            }
            nextEvent[i] = left;
        }

        return attendEvent(events, 0, k);
    }

    private int attendEvent(int[][] events, int i, int k) {
        if (k == 0 || i >= n) {
            return 0;
        }
        if (dp[i][k] != -1) {
            return dp[i][k];
        }

        int skipEvent = attendEvent(events, i + 1, k);

        int next = nextEvent[i];
        int attend = attendEvent(events, next, k - 1) + events[i][2];

        return dp[i][k] = Math.max(skipEvent, attend);
    }
}