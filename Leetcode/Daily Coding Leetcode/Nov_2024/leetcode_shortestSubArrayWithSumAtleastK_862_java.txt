import java.util.Deque;
import java.util.LinkedList;

class Solution {
    public int shortestSubarray(int[] nums, int k) {
        int n = nums.length;
        long[] prefixSum = new long[n+1];

        for(int i=0; i<n; i++) {
            prefixSum[i+1] = prefixSum[i] + nums[i];
        }

        Deque<Integer> deque = new LinkedList<>();

        int minLen = Integer.MAX_VALUE;

        for(int i=0; i<=n; i++) {
            while(!deque.isEmpty() && prefixSum[i] - prefixSum[deque.peekFirst()] >= k) {
                minLen = Math.min(minLen, i - deque.pollFirst());
            }

            while(!deque.isEmpty() && prefixSum[i] <= prefixSum[deque.peekLast()]) {
                deque.pollLast();
            }

            deque.addLast(i);
        }

        return minLen == Integer.MAX_VALUE ? -1 : minLen;
    }
}