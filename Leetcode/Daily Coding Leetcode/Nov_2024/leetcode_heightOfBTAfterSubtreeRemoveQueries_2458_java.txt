/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int[] level = new int[100001];
    private int[] height = new int[100001];
    private int[] levelMaxHeight = new int[100001];
    private int[] levelSecondMaxHeight = new int[100001];

    private int findHeight(TreeNode root, int l) {
        if(root == null) return 0;

        level[root.val] = l;
        height[root.val] = Math.max(findHeight(root.left, l+1), findHeight(root.right, l+1)) + 1;
        if(levelMaxHeight[l] < height[root.val]) {
            levelSecondMaxHeight[l] = levelMaxHeight[l];
            levelMaxHeight[l] = height[root.val];
        } else if(levelSecondMaxHeight[l] < height[root.val]) {
            levelSecondMaxHeight[l] = height[root.val];
        }
        return height[root.val];
    }

    public int[] treeQueries(TreeNode root, int[] queries) {
        findHeight(root, 0);
        int[] result = new int[queries.length];

        for(int i=0; i<queries.length; i++) {
            int node = queries[i];
            int lev = level[node];
            int tempRes = lev + (levelMaxHeight[lev] == height[node] ? levelSecondMaxHeight[lev] : levelMaxHeight[lev]) - 1;
            result[i] = tempRes;
        }
        return result;
    }
}