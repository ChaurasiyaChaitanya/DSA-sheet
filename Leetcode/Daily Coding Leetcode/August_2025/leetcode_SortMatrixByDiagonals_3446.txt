class Solution {
    public int[][] sortMatrix(int[][] grid) {
        int n = grid.length;

        // Bottom-left diagonals - sort in non-increasing order
        for(int row=0; row<n; row++) {
            sortDiagonal(row, 0, grid, false);
        }

        // Top-right diagonals - sort in non-decreasing order
        for (int col=1; col<n; col++) {
            sortDiagonal(0, col, grid, true);
        }

        return grid;
    }

    private void sortDiagonal(int r, int c, int[][] grid, boolean asc) {
        List<Integer> diagonal = new ArrayList<>();

        int i = r, j = c;
        int n = grid.length;
        
        while (i < n && j < n) {
            diagonal.add(grid[i++][j++]);
        }

        if(asc) {
            Collections.sort(diagonal); // ascending
        } else {
            diagonal.sort(Collections.reverseOrder()); // descending
        }

        i = r;
        j = c;
        for (int val : diagonal) {
            grid[i++][j++] = val;
        }
    }
}