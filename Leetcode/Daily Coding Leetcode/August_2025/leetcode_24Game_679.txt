class Solution {
    private static final double EPSILON = 1e-6; // to avoid floating point precision errors

    public boolean judgePoint24(int[] cards) {
        List<Double> nums = new ArrayList<>();
    
        for(int card : cards) {
            nums.add((double) card);
        }

        return solve(nums);
    }

    private boolean solve(List<Double> nums) {
        if(nums.size() == 1) {
            return Math.abs(nums.get(0) - 24.0) < EPSILON;
        }

        int n = nums.size();

        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(i == j)
                    continue;

                List<Double> next = new ArrayList<>();
                for(int k=0; k<n; k++) {
                    if(k != i && k != j) {
                        next.add(nums.get(k));
                    }
                }

                double a = nums.get(i);
                double b = nums.get(j);

                // Add
                next.add(a+b);
                if(solve(next)) return true;
                next.remove(next.size()-1);

                // Subtract
                next.add(a-b);
                if(solve(next)) return true;
                next.remove(next.size()-1);

                // Multiply
                next.add(a*b);
                if(solve(next)) return true;
                next.remove(next.size()-1);

                if(Math.abs(b) > EPSILON){
                    // Divison
                    next.add(a/b);
                    if(solve(next)) return true;
                    next.remove(next.size()-1);
                }
            }
        }

        return false;
    }
}