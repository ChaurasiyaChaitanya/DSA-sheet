class Solution {
    public long minCost(int[] basket1, int[] basket2) {
        Map<Integer, Integer> map = new HashMap<>();
        int minEle = Integer.MAX_VALUE;

        for(int i=0; i<basket1.length; i++) {
            map.put(basket1[i], map.getOrDefault(basket1[i], 0) + 1);
            map.put(basket2[i], map.getOrDefault(basket2[i], 0) - 1);

            minEle = Math.min(minEle, Math.min(basket1[i], basket2[i]));
        }

        List<Integer> list = new ArrayList<>();

        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int count = entry.getValue();
            if(count == 0)
                continue;
            
            if(count % 2 != 0)
                return -1;
            
            for(int i=1; i<=Math.abs(count)/2; i++) {
                list.add(entry.getKey());
            }
        }

        Collections.sort(list);

        long result = 0;
        for(int i=0; i<list.size()/2; i++) {
            result += Math.min(list.get(i), 2 * minEle);
        }

        return result;
    }
}