class Solution {
    public int findMaxFish(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int maxFish = 0;
        boolean[][] visited = new boolean[m][n];

        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(!visited[i][j] && grid[i][j] > 0) {
                    visited[i][j] = true;
                    maxFish = Math.max(maxFish, dfs(grid, visited, m, n, i, j));
                }
            }
        }

        return maxFish;
    }

    private int dfs(int[][] grid, boolean[][] visited, int m, int n, int x, int y) {
        int count = grid[x][y];
        int[] dir = {-1, 0, 1, 0, -1};

        for(int i=0; i<4; i++) {
            int nx = x + dir[i];
            int ny = y + dir[i+1];

            if(isValid(nx, ny, m, n) && !visited[nx][ny] && grid[nx][ny] > 0) {
                visited[nx][ny] = true;
                count += dfs(grid, visited, m, n, nx, ny);
            }
        }

        return count;
    }

    private boolean isValid(int x, int y, int m, int n) {
        return x >= 0 && x < m && y >= 0 && y < n;
    }
}