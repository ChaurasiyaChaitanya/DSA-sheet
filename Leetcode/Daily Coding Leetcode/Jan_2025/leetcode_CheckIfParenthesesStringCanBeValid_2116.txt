class Solution {
    public boolean canBeValid(String s, String locked) {
        int n = s.length();

        // Base case - Odd length string can't be balanced
        if((n&1) == 1) return false;

        // First Pass - Overbalanced closing parentheses ')' check
        int opening = 0, closing = 0, available = 0;

        for(int i=0; i<n; i++) {
            if(locked.charAt(i) == '0') {
                available++;
            } else if(s.charAt(i) == '(') {
                opening++;
            } else {
                closing++;
            }

            if(available < (closing - opening)) return false;
        }

        // Second Pass - Overbalanced opening parentheses '(' check
        opening = closing = available = 0;

        for(int i=n-1; i>=0; i--) {
            if(locked.charAt(i) == '0') {
                available++;
            } else if(s.charAt(i) == '(') {
                opening++;
            } else {
                closing++;
            }

            if(available < (opening - closing)) return false;
        }

        return true;
    }
}