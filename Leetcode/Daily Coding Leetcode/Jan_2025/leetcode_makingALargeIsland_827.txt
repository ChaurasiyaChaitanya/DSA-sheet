class Solution {

    private int[] dir = {-1, 0, 1, 0, -1};

    public int largestIsland(int[][] grid) {
        int n = grid.length;
        Map<Integer, Integer> islandSize = new HashMap<>();
        int islandNum = 2;

        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(grid[i][j] == 1) {
                    int island = markIsland(grid, islandNum, n, i, j);
                    islandSize.put(islandNum, island);
                    islandNum++;
                }
            }
        }

        int result = 0;
        for(int x=0; x<n; x++) {
            for(int y=0; y<n; y++) {
                if(grid[x][y] == 0) {
                    Set<Integer> islands = new HashSet<>();
                    for(int i=0; i<4; i++) {
                        int nx = x + dir[i];
                        int ny = y + dir[i+1];

                        if(isValid(n, nx, ny)) {
                            islands.add(grid[nx][ny]);
                        }
                    }

                    int currIsland = 1;
                    for(int key : islands) {
                        currIsland += islandSize.getOrDefault(key, 0);
                    }

                    result = Math.max(result, currIsland);
                }
            }
        }

        return result == 0 ? n*n : result;
    }

    private boolean isValid(int n, int x, int y) {
        return x >= 0 && x < n && y >= 0 && y < n;
    }

    private int markIsland(int[][] grid, int islandNum, int n, int x, int y) {
        grid[x][y] = islandNum;
        int count = 1;
        for(int i=0; i<4; i++) {
            int nx = x + dir[i];
            int ny = y + dir[i+1];

            if(isValid(n, nx, ny) && grid[nx][ny] == 1) {
                count += markIsland(grid, islandNum, n, nx, ny);
            }
        }

        return count;
    }
}