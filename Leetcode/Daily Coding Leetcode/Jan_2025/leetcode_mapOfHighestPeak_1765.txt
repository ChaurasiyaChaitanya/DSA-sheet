class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int m = isWater.length, n = isWater[0].length;
        int[][] result = new int[m][n];
        Queue<int[]> q = new LinkedList<>();
        boolean[][] visited = new boolean[m][n];

        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(isWater[i][j] == 1) {
                    q.offer(new int[]{i,j});
                    visited[i][j] = true;
                }
            }
        }

        int[] dir = {-1, 0, 1, 0};
        int level = 0;

        while(!q.isEmpty()) {
            int size = q.size();
            for(int i=0; i<size; i++) {
                int[] curr = q.poll();
                int x = curr[0], y = curr[1];

                for(int d=0; d<4; d++) {
                    int nx = x + dir[d];
                    int ny = y + dir[(d+1)%4];

                    if(isValid(nx, ny, m, n) && !visited[nx][ny]) {
                        q.offer(new int[]{nx, ny});
                        result[nx][ny] = 1 + level;
                        visited[nx][ny] = true;
                    }
                }
            }
            level++;
        }

        return result;
    }

    private static boolean isValid(int x, int y, int m, int n) {
        return x >=0 && x < m && y >= 0 && y < n;
    }
}