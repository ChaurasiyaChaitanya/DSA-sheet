class Solution {
    public boolean primeSubOperation(int[] nums) {
        int maxNum = 0;
        for(int num : nums) {
            maxNum = Math.max(maxNum, num);
        }

        boolean[] primeSieve = new boolean[maxNum + 1];

        for(int i=0; i<primeSieve.length; i++) {
            primeSieve[i] = true;
        }

        primeSieve[1] = false;
        for(int i=2; i<=Math.sqrt(maxNum+1); i++) {
            if(primeSieve[i]) {
                for(int j=i*i; j<=maxNum; j+=i) {
                    primeSieve[j] = false;
                }
            }
        }

        int currVal = 1, i=0;

        while(i < nums.length) {
            int diff = nums[i] - currVal;

            if(diff < 0) return false;

            if(primeSieve[diff] == true || diff == 0) {
                i++;
                currVal++;
            } else {
                currVal++;
            }
        }

        return true;
    }
}