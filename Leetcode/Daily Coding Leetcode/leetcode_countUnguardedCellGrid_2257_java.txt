class Solution {
    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {
        int[][] visit = new int[m][n];

        for(int[] wall : walls) {
            visit[wall[0]][wall[1]] = 2;
        }

        for(int[] guard : guards) {
            visit[guard[0]][guard[1]] = 3;
        }

        for(int[] guard : guards) {
            int row = guard[0], col = guard[1];

            for(int i=row+1; i<m; i++) {
                if(visit[i][col] == 2 || visit[i][col] == 3) break;
                visit[i][col] = 1;
            }

            for(int i=row-1; i>=0; i--) {
                if(visit[i][col] == 2 || visit[i][col] == 3) break;
                visit[i][col] = 1;
            }

            for(int i=col+1; i<n; i++) {
                if(visit[row][i] == 2 || visit[row][i] == 3) break;
                visit[row][i] = 1;
            }

            for(int i=col-1; i>=0; i--) {
                if(visit[row][i] == 2 || visit[row][i] == 3) break;
                visit[row][i] = 1;
            }

        }

        int unguarded = 0;
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(visit[i][j] == 0) unguarded++;
            }
        }

        return unguarded;
    }
}