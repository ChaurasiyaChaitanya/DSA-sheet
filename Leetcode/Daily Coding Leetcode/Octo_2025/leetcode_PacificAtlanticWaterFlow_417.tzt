class Solution {
    private int m, n;
    private int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0,-1}};

    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        m = heights.length;
        n = heights[0].length;
        boolean[][] pacific = new boolean[m][n];
        boolean[][] atlantic = new boolean[m][n];

        for(int i=0; i<m; i++) {
            dfs(i, 0, heights, pacific);
            dfs(i, n-1, heights, atlantic);
        }

        for(int j=0; j<n; j++) {
            dfs(0, j, heights, pacific);
            dfs(m-1, j, heights, atlantic);
        }

        List<List<Integer>> result = new ArrayList<>();
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(pacific[i][j] && atlantic[i][j]) {
                    result.add(Arrays.asList(i, j));
                }
            }
        }

        return result;
    }

    private void dfs(int x, int y, int[][] heights, boolean[][] visited) {
        if(visited[x][y]) 
            return;

        visited[x][y] = true;

        for(int[] dir : directions) {
            int nx = x + dir[0], ny = y + dir[1];

            if (nx >= 0 && nx < m && ny >= 0 && ny < n && heights[nx][ny] >= heights[x][y]) {
                dfs(nx, ny, heights, visited);
            }           
        }
    }
}