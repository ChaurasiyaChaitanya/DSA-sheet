class Solution {
    private int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0,-1}};
    private int n;
    private boolean[][] visited;

    public int swimInWater(int[][] grid) {
        n = grid.length;
        int result = Integer.MAX_VALUE;
        int low = 0;
        int high = n * n - 1;

        while(low <= high) {
            int mid = low + (high - low) / 2;
            visited = new boolean[n][n];
            if(grid[0][0] <= mid && dfs(grid, 0, 0, mid)) {
                result = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return result;
    }

    private boolean dfs(int[][] grid, int x, int y, int t) {
        visited[x][y] = true;

        if(x == n - 1 && y == n - 1) 
            return true;

        for(int[] dir : directions) {
            int nx = x + dir[0], ny = y + dir[1];
            if(nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny] && grid[nx][ny] <= t) {
                if (dfs(grid, nx, ny, t)) 
                    return true;
            }
        }

        return false;
    }
}