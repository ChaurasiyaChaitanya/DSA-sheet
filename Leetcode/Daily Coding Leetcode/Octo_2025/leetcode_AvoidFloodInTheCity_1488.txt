class Solution {
    public int[] avoidFlood(int[] rains) {
        int n = rains.length;

        Map<Integer, Integer> map = new HashMap<>();
        TreeSet<Integer> dryDays = new TreeSet<>();

        int[] result = new int[n];
        Arrays.fill(result, 1);

        for(int i=0; i<n; i++) {
            int lake = rains[i];

            if(lake == 0) {
                dryDays.add(i);
            } else {
                result[i] = -1;
                if(map.containsKey(lake)) {
                    Integer dryDay = dryDays.higher(map.get(lake)); 
                    if (dryDay == null) {
                        // no dry day available to empty this lake before raining again so flood
                        return new int[]{};
                    }

                    result[dryDay] = lake;
                    dryDays.remove(dryDay);
                }
                map.put(lake, i);
            }
        }

        return result;
    }
}