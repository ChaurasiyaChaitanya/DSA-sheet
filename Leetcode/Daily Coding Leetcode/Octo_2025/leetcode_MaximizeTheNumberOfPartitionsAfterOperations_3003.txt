class Solution {
    private Map<Long, Integer> map = new HashMap<>();

    public int maxPartitionsAfterOperations(String s, int k) {
        return solve(s, k, 0, 0, true) + 1;
    }

    private int solve(String s, int k, long i, long uniqueChars, boolean canChange) {
        long key = (i << 27) | (uniqueChars << 1) | (canChange ? 1 : 0);

        if(map.containsKey(key)) {
            return map.get(key);
        }

        if(i == s.length()) {
            return 0;
        }

        int characterIndex = s.charAt((int) i) - 'a';
        long uniqueCharsUpdated = uniqueChars | (1L << characterIndex);
        int uniqueCharCount = Long.bitCount(uniqueCharsUpdated);

        int result;
        if(uniqueCharCount > k) {
            result = 1 + solve(s, k, i + 1, 1L << characterIndex, canChange);
        } else {
            result = solve(s, k, i + 1, uniqueCharsUpdated, canChange);
        }

        if (canChange) {
            for(int newCharIndex=0; newCharIndex<26; newCharIndex++) {
                long newSet = uniqueChars | (1L << newCharIndex);
                int newUniqueCharCount = Long.bitCount(newSet);

                if (newUniqueCharCount > k) {
                    result = Math.max(result, 1 + solve(s, k, i + 1, 1L << newCharIndex, false));
                } else {
                    result = Math.max(result, solve(s, k, i + 1, newSet, false));
                }
            }
        }
        
        map.put(key, result);

        return result;
    }
}