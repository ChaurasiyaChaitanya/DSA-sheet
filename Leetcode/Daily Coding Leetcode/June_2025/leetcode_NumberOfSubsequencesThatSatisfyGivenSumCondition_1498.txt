class Solution {
    private static final int MOD = (int) 1e9 + 7;

    public int numSubseq(int[] nums, int target) {
        int n = nums.length;
        int[] powerOfTwo = new int[n];

        precomputePower(powerOfTwo, n);

        Arrays.sort(nums);

        int left= 0, right = n - 1;
        int result = 0;

        while(left <= right) {
            if(nums[left] + nums[right] > target) {
                right--;
            } else {
                result = (result + powerOfTwo[right - left]) % MOD;
                left++;
            }
        }

        return result;
    }

    private void precomputePower(int[] powerOfTwo, int n) {
        powerOfTwo[0] = 1;
        for(int i=1; i<n; i++) {
            powerOfTwo[i] = (int) ((powerOfTwo[i-1] * 2L) % MOD);
        }
    }
}