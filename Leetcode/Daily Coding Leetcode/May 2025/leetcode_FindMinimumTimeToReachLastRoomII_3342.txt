class Solution {
    public int minTimeToReach(int[][] moveTime) {
        int m = moveTime.length, n = moveTime[0].length;
        int[][] bestTime = new int[m][n];

        for(int[] row : bestTime) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }

        int[][] dir = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.offer(new int[]{0, 0, 0, 0});

        while(!pq.isEmpty()) {
            int[] curr = pq.poll();
            int time = curr[0], x = curr[1], y = curr[2], nextMoveTime = curr[3];

            if(time >= bestTime[x][y])
                continue;
            
            bestTime[x][y] = time;

            if(x == m-1 && y == n-1)
                return time;

            for(int[] d : dir) {
                int nx = x + d[0], ny = y + d[1];

                if(nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int wait = moveTime[nx][ny];
                    int futureMove = nextMoveTime == 1 ? 2 : 1;
                    int nextTime = wait > time ? wait + futureMove : time + futureMove;

                    if(x == 0 && y == 0 && wait <= time) {
                        nextTime = wait + futureMove;
                    }

                    if(bestTime[nx][ny] > nextTime) {
                        pq.offer(new int[]{nextTime, nx, ny, futureMove});
                    }
                }
            }
        }

        return -1;
    }
}