class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        boolean[] visited = new boolean[n * n + 1];
        visited[1] = true;

        Queue<Integer> q = new LinkedList<>();
        q.offer(1);

        int level = 0;
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i=0; i<size; i++) {
                int curr = q.poll();

                if(curr == n * n) 
                    return level;

                for(int next = curr+1; next<=Math.min(curr+6, n*n); next++) {
                    int dest = next;
                    int row = (next - 1) / n;
                    int col = (next - 1) % n;

                    if(row % 2 == 1) {
                        col = n - 1 - col;
                    }
                    row = n - 1 - row;

                    if(board[row][col] != -1) {
                        dest = board[row][col];
                    }

                    if (!visited[dest]) {
                        visited[dest] = true;
                        q.offer(dest);
                    }
                }
            }
            level++;
        }

        return -1;
    }
}