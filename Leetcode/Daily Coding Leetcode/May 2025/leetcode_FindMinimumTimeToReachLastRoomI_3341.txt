class Solution {
    public int minTimeToReach(int[][] moveTime) {
        int m = moveTime.length, n = moveTime[0].length;
        int[][] dist = new int[m][n];

        for(int[] row : dist) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }

        dist[0][0] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[2]));
        pq.offer(new int[]{0, 0, 0});

        int[][] dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        while(!pq.isEmpty()) {
            int[] curr = pq.poll();
            int x = curr[0], y = curr[1], time = curr[2];

            if(x == m-1 && y == n-1)
                return time;

            for(int[] d : dir) {
                int nx = x + d[0], ny = y + d[1];

                if(nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int waitTime = Math.max(0, moveTime[nx][ny] - time);
                    int arriveTime = time + 1 + waitTime;

                    if(arriveTime < dist[nx][ny]) {
                        dist[nx][ny] = arriveTime;
                        pq.offer(new int[]{nx, ny, arriveTime});
                    }
                }
            }
        }

        return -1;
    }
}