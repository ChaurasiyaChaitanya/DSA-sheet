class Solution {
    public int[] maxTargetNodes(int[][] edges1, int[][] edges2, int k) {
        int m = edges1.length + 1;
        int n = edges2.length + 1;

        List<List<Integer>> adj1 = new ArrayList<>();
        for (int i=0; i<m; i++) {
            adj1.add(new ArrayList<>());
        }
        for (int[] edge : edges1) {
            adj1.get(edge[0]).add(edge[1]);
            adj1.get(edge[1]).add(edge[0]);
        }

        List<List<Integer>> adj2 = new ArrayList<>();
        for (int i=0; i<n; i++) {
            adj2.add(new ArrayList<>());
        }
        for (int[] edge : edges2) {
            adj2.get(edge[0]).add(edge[1]);
            adj2.get(edge[1]).add(edge[0]);
        }

        int bestNode = 0;
        for (int i=0; i<n; i++) {
            int connections = bfs(i, adj2, k - 1);
            bestNode = Math.max(bestNode, connections);
        }

        int[] result = new int[m];
        for (int i=0; i<m; i++) {
            int connections = bfs(i, adj1, k);
            result[i] = connections + bestNode;
        }

        return result;
    }

    private int bfs(int start, List<List<Integer>> adj, int k) {
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{start, -1});
        int count = 0;

        while (!q.isEmpty() && k>=0) {
            int size = q.size();
            count += size;
            for (int i=0; i<size; i++) {
                int[] curr = q.poll();
                int u = curr[0];
                int parent = curr[1];
                for (int v : adj.get(u)) {
                    if (v != parent) {
                        q.add(new int[]{v, u});
                    }
                }
            }
            k--;
        }

        return count;
    }
}