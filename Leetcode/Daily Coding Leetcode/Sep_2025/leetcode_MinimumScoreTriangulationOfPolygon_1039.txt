class Solution {
    private int[][] dp;

    public int minScoreTriangulation(int[] values) {
        int n = values.length;
        dp = new int[n][n];

        for(int[] row : dp) {
            Arrays.fill(row, -1);
        }

        return solve(values, 0, n-1);
    }

    private int solve(int[] values, int i, int j) {
        // Need at least 3 points to form a triangle
        if (j - i + 1 < 3) {
            return 0;
        }

        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        int result = Integer.MAX_VALUE;

        for (int k=i+1; k<j; k++) {
            int wt = values[i] * values[k] * values[j] + solve(values, i, k) + solve(values, k, j);
            result = Math.min(result, wt);
        }

        return dp[i][j] = result;
    }
}


class Solution {
    public int minScoreTriangulation(int[] values) {
        int n = values.length;
        int[][] dp = new int[n][n];

        // length is number of vertices in subpolygon
        for(int len=3; len<=n; len++) {
            for(int i=0; i+len-1<n; i++) {
                int j = i + len - 1;
                dp[i][j] = Integer.MAX_VALUE;

                for(int k=i+1; k<j; k++) {
                    dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j] + values[i] * values[j] * values[k]);
                }
            }
        }

        return dp[0][n-1];
    }
}