class Solution {

    int count = 0;

    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        ArrayList[] adjList = new ArrayList[n];
        for(int i=0; i<n; i++) {
            adjList[i] = new ArrayList<>();
        }

        for(int[] edge : edges) {
            int u = edge[0], v = edge[1];
            adjList[u].add(v);
            adjList[v].add(u);
        }

        traverseDFS(0, -1, adjList, values, k);

        return count;
    }

    private int traverseDFS(int currNode, int parentNode, ArrayList<Integer>[] adjList, int[] values, int k) {
        int sum = 0;

        for(int node : adjList[currNode]) {
            if(node == parentNode)
                continue;
            sum += traverseDFS(node, currNode, adjList, values, k);
        }

        sum += values[currNode];
        sum = sum % k;

        if(sum == 0) count++;

        return sum;
    }
}