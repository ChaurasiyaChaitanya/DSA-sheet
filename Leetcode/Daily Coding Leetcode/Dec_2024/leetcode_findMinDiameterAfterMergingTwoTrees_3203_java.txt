class Solution {
    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {
        List<Integer>[] adjList1 = buildTree(edges1);
        List<Integer> root1 = new ArrayList<>();
        int diameter1 = getRoots(adjList1, root1);
        int height1 = diameter1 / 2;

        List<Integer>[] adjList2 = buildTree(edges2);
        List<Integer> root2 = new ArrayList<>();
        int diameter2 = getRoots(adjList2, root2);
        int height2 = diameter2 / 2;

        if(root1.size() == 2)
            height1++;

        if(root2.size() == 2)
            height2++;

        return Math.max(Math.max(diameter1, diameter2), height1 + height2 + 1);
    }

    private List<Integer>[] buildTree(int[][] edges) {
        int m = edges.length + 1;
        List<Integer>[] adjList = new List[m];
        for(int i=0; i<m; i++) {
            adjList[i] = new ArrayList<>();
        }

        for(int[] edge : edges) {
            adjList[edge[0]].add(edge[1]);
            adjList[edge[1]].add(edge[0]);
        }

        return adjList;
    }

    private int getRoots(List<Integer>[] adjList, List<Integer> root) {
        int height = 0;
        int n = adjList.length;
        int[] edgeCount = new int[n];
        for(int i=0; i<n; i++) {
            if(adjList[i].size() == 1) {
                root.add(i);
            }
            edgeCount[i] = adjList[i].size();
        }

        while(n > 2) {
            height++;
            n -= root.size();
            List<Integer> next = new ArrayList<>();
            for(int size=0; size < root.size(); size++) {
                int top = root.get(size);
                for(int neighbour : adjList[top]) {
                    edgeCount[neighbour]--;
                    if(edgeCount[neighbour] == 1) {
                        next.add(neighbour);
                    }
                }
            }   
            root.clear();
            root.addAll(next);
        }
        if(root.size() == 1) {
            return 2*height;
        }
        return 2*height+1;
    }
}