/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minimumOperations(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int result = 0;

        while(!queue.isEmpty()) {
            List<Integer> list = new ArrayList<>();
            int size = queue.size();

            for(int i=0; i<size; i++) {
                TreeNode node = queue.remove();
                list.add(node.val);
                if(node.left != null) 
                    queue.add(node.left);
                if(node.right != null) 
                    queue.add(node.right);
            }

            result += minSwaps(list);
        }

        return result;
    }

    private int minSwaps(List<Integer> list) {
        List<Integer> sorted = new ArrayList<>(list);
        Collections.sort(sorted);

        Map<Integer, Integer> map = new HashMap<>();

        for(int i=0; i<sorted.size(); i++) {
            map.put(sorted.get(i), i);
        }

        int i = 0, swaps = 0;

        while(i < list.size()) {
            int idx = map.get(list.get(i));
            if(idx == i) i+=1;
            else {
                int temp = list.get(i);
                list.set(i, list.get(idx));
                list.set(idx, temp);
                swaps += 1;
            }
        }

        return swaps;
    }
}