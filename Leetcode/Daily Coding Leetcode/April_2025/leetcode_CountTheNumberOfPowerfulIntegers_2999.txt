class Solution {
    public long numberOfPowerfulInt(long start, long finish, int limit, String s) {
        String startStr = Long.toString(start - 1);
        String finishStr = Long.toString(finish);

        return solve(finishStr, s, limit) - solve(startStr, s, limit);
    }

    private long solve(String str, String s, int limit) {
        if(str.length() < s.length()) 
            return 0;

        long count = 0;
        String suffix = str.substring(str.length() - s.length());
        int remLen = str.length() - s.length();

        for(int i=0; i<remLen; i++) {
            int digit = str.charAt(i) - '0';
            
            if(limit < digit) {
                count += (long) Math.pow(limit+1, remLen-i);
                return count;
            } else {
                count += (long) digit * (long) Math.pow(limit+1, remLen-i-1);
            }
        }

        if(suffix.compareTo(s) >= 0) {
            count++;
        }

        return count;
    }
}