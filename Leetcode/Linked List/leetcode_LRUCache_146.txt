class LRUCache {

    class Node {
        Node prev;
        Node next;
        int key;
        int val;

        Node(int key, int val) {
            this.key = key;
            this.val = val;
        }
    }

    Node head = new Node(-1, -1);
    Node tail = new Node(-1, -1);

    int size;
    HashMap<Integer, Node> cache = new HashMap<>();

    public LRUCache(int capacity) {
        head.next = tail;
        tail.prev = head;
        size = capacity;
    }

    private void addNode(Node newNode) {
        Node oldNode = head.next;
        newNode.next = oldNode;
        newNode.prev = head;

        head.next = newNode;
        oldNode.prev = newNode;
    }

    private void deleteNode(Node delNode) {
        Node prevNode = delNode.prev;
        Node nextNode = delNode.next;

        prevNode.next = nextNode;
        nextNode.prev = prevNode;
    }
    
    public int get(int key) {
        if(cache.containsKey(key)) {
            Node node = cache.get(key);
            int res = node.val;

            cache.remove(key);
            deleteNode(node);
            addNode(node);

            cache.put(key, head.next);

            return res;
        }

        return -1;
    }
    
    public void put(int key, int value) {
        if(cache.containsKey(key)) {
            Node node = cache.get(key);
            cache.remove(key);
            deleteNode(node);
        }

        if(cache.size() == size) {
            cache.remove(tail.prev.key);
            deleteNode(tail.prev);
        }

        addNode(new Node(key, value));
        cache.put(key, head.next);
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */