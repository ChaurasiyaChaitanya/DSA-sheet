class Solution {
    public int totalNQueens(int n) {
        char[][] board = new char[n][n];

        for(int i=0; i<n; i++) {
            Arrays.fill(board[i], '.');
        }

        return solve(board, n, 0);
    }

    private int solve(char[][] board, int n, int row) {
        if(row == n) {
            return 1;
        }

        int result = 0;
        for(int col=0; col<n; col++) {
            if(isSafeQueen(board, n, row, col)) {
                board[row][col] = 'Q';
                result += solve(board, n, row+1);
                board[row][col] = '.';
            }
        }

        return result;
    }

    private boolean isSafeQueen(char[][] board, int n, int row, int col) {
        for(int i=0; i<row; i++) {
            if(board[i][col] == 'Q') 
                return false;
        }

        int maxLeft = Math.min(row, col);

        for(int i=1; i<=maxLeft; i++) {
            if(board[row-i][col-i] == 'Q')
                return false;
        }

        int maxRight = Math.min(row, n-col-1);

        for(int i=1; i<=maxRight; i++) {
            if(board[row-i][col+i] == 'Q')
                return false;
        }

        return true;
    }
}

