class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        char[][] board = new char[n][n];

        for(int i=0; i<n; i++) {
            Arrays.fill(board[i], '.');
        }

        solve(board, n, result, 0);

        return result;
    }

    private void solve(char[][] board, int n, List<List<String>> result, int row) {
        if(row == n) {
            List<String> res = new ArrayList<>();
            for(char[] rowArr : board) {
                res.add(new String(rowArr));
            }

            result.add(res);
            return;
        }

        for(int col=0; col<n; col++) {
            if(isSafeQueen(board, n, row, col)) {
                board[row][col] = 'Q';
                solve(board, n, result, row+1);
                board[row][col] = '.';
            }
        }
    }

    private boolean isSafeQueen(char[][] board, int n, int row, int col) {
        for(int i=0; i<row; i++) {
            if(board[i][col] == 'Q') 
                return false;
        }

        int maxLeft = Math.min(row, col);

        for(int i=1; i<=maxLeft; i++) {
            if(board[row-i][col-i] == 'Q')
                return false;
        }

        int maxRight = Math.min(row, n-col-1);

        for(int i=1; i<=maxRight; i++) {
            if(board[row-i][col+i] == 'Q')
                return false;
        }

        return true;
    }
}